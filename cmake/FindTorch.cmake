
if (WIN32)
# modify the below line for your directory
set(TORCH_TOP_DIR "${TOP_DIR}/Extern/libtorch_1.13.0")
endif (WIN32)

set (TORCH_FIND_REQUIRED_COMPONENTS TORCH TORCH_CUDA TORCH_CPU C10 C10_CUDA CAFFE2_NVRTC)
set (TORCH_DEBUG_LIBPATH ${TORCH_TOP_DIR}/lib/Debug)
set (TORCH_RELEASE_LIBPATH ${TORCH_TOP_DIR}/lib/Release)

#FIND_PATH(TORCH_INCLUDE_DIR torch/csrc/WindowsTorchApiMacro.h
FIND_PATH(TORCH_INCLUDE_DIR torch/csrc/Types.h
	${TORCH_TOP_DIR}/include
)

FIND_PATH(TORCH_API_INCLUDE_DIR torch/torch.h
	${TORCH_TOP_DIR}/include/torch/csrc/api/include 
)


FIND_LIBRARY(TORCH_DEBUG_LIB NAMES torch PATHS ${TORCH_DEBUG_LIBPATH})
FIND_LIBRARY(TORCH_RELEASE_LIB NAMES torch PATHS ${TORCH_RELEASE_LIBPATH})

FIND_LIBRARY(TORCH_CUDA_DEBUG_LIB NAMES torch_cuda PATHS ${TORCH_DEBUG_LIBPATH})
FIND_LIBRARY(TORCH_CUDA_RELEASE_LIB NAMES torch_cuda PATHS ${TORCH_RELEASE_LIBPATH})

FIND_LIBRARY(TORCH_CPU_DEBUG_LIB NAMES torch_cpu PATHS ${TORCH_DEBUG_LIBPATH})
FIND_LIBRARY(TORCH_CPU_RELEASE_LIB NAMES torch_cpu PATHS ${TORCH_RELEASE_LIBPATH})

FIND_LIBRARY(C10_DEBUG_LIB NAMES c10 PATHS ${TORCH_DEBUG_LIBPATH})
FIND_LIBRARY(C10_RELEASE_LIB NAMES c10 PATHS ${TORCH_RELEASE_LIBPATH})

FIND_LIBRARY(C10_CUDA_DEBUG_LIB NAMES c10_cuda PATHS ${TORCH_DEBUG_LIBPATH})
FIND_LIBRARY(C10_CUDA_RELEASE_LIB NAMES c10_cuda PATHS ${TORCH_RELEASE_LIBPATH})

FIND_LIBRARY(CAFFE2_NVRTC_DEBUG_LIB NAMES caffe2_nvrtc PATHS ${TORCH_DEBUG_LIBPATH})
FIND_LIBRARY(CAFFE2_NVRTC_RELEASE_LIB NAMES caffe2_nvrtc PATHS ${TORCH_RELEASE_LIBPATH})

FOREACH(NAME ${TORCH_FIND_REQUIRED_COMPONENTS})
	LIST(APPEND TORCH_DEBUG_LIBRARIES    "${${NAME}_DEBUG_LIB}")
	LIST(APPEND TORCH_RELEASE_LIBRARIES  "${${NAME}_RELEASE_LIB}")
ENDFOREACH(NAME)


if(TORCH_API_INCLUDE_DIR)
   set(TORCH_FOUND TRUE)
endif(TORCH_API_INCLUDE_DIR)
	 
if(TORCH_FOUND)
   if(NOT TORCH_FIND_QUIETLY)
      message(STATUS "Found TORCH: ${TORCH_API_INCLUDE_DIR}")
   endif(NOT TORCH_FIND_QUIETLY)
else(TORCH_FOUND)
   if(TORCH_FIND_REQUIRED)
      message(FATAL_ERROR "could NOT find TORCH")
   endif(TORCH_FIND_REQUIRED)
endif(TORCH_FOUND)

MARK_AS_ADVANCED(TORCH_TOP_DIR, TORCH_DEBUG_LIBRARIES, TORCH_DEBUG_LIBPATH, TORCH_INCLUDE_DIR)
MARK_AS_ADVANCED(TORCH_RELEASE_LIBRARIES, TORCH_RELEASE_LIBPATH, TORCH_API_INCLUDE_DIR)

message(${TORCH_RELEASE_LIBRARIES})
